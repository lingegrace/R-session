---
title: "session1"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).

```{r}
3+3
```

To run a cell, command+enter

To insert code chunk, insert–\>executable cell–\>R OR comand+option+i

```{r}
#squareroot function 
result_XXX = sqrt(#)
  result_XXX 
#run the result

#square function 
#X^2 = square of X

result_sqrt <- sqrt(4)
result_sqrt

#————————————————————
#example:
my_function = function (a,b) {
return(a/2 +b-3)
}

my_function(4,3)
```

```{r}
# VECTOR is one-dimensional arrays that hold elements of a signle data type (numerical, or all character)

vec_example = c (1,3,4)
vec_example ##print out vec_example 

#————————————————————

#check type 
vec1= c ("a", "b", "c")
vec1
class(vec1)
#————————————————————

#sequence1: write out the sequence
c(1,2,3,4,5,6,7,8,9,10)
#sequence2: sequence of increment of 1 
c(1:10)
#sequence3: start, end, by increment of X
seq(1,14, by=3)
#————————————————————


# NA is undefined, missing data 
# NA can vary by data type: NA_character_ and NA_integer_
vec = c(1,2,3,NA)
mean(vec)

#————————————————————
#class exercise 
x = 3
y = 4
z = x*y
z

## not greater than --> greataer than & not 
x >=! 10

#false: x !>= 10 

three_squared = 3^2
three_squared

three_squared > 10 

#————————————————————

c (100, 101, 102, 103, 104, 105)
seq(100, 105, by = 1)
c (100:105) #most efficient way of sequence with +1 increment 

seq(0, 100, by =2)

descending_seq = seq(100,1)
descending_seq

#————————————————————
#function exmaple:
#random draws from a standard normal distribution 
random_draws <- rnorm(n=5,
                  mean =0,
                  sd=1)
#find the mean
mean(random_draws)
#find the median 
median(random_draws)
#find the standard deviation
sd(random_draws)

```

```{r}
#indexing the first one 
vec = c (1,2,3,4)
first_element = vec[1]
first_element

#conditional indexing 
#vec= sequence from 5 to 33, select the number>25
vec = seq(5,33, by=2)
vec[vec>25]

#Data frames:two-dimensional tables where each column can have different data type; a list of vectors of equal length

example_df <- data.frame(
  
  ID = c (1,2,3,4),
  Name = c ("Aive", "Bon", "Cathy", "David"),
  Age = c (6,7,9,8),
  Score = c (2,3,4,5)
)
  
example_df

#print first two rows, first row
head(example_df, 2)

#access name column
example_df$Name

#
example_df[1:3, 2:3]

knitr::kable(example_df)

#————————————————————



```

```{r}
random_draws <- rnorm(n=100,
                  mean =10,
                  sd=2)
random_draws [1] ##square brakcet 
random_draws [10]
random_draws [100]

random_draws[c(1,10,100)]


x= mean(random_draws)
x

population_mean=10

diff_erence1 = x-population_mean
diff_erence1

random_draws <- rnorm(n=1000,
                  mean =10,
                  sd=2)

y= mean(random_draws)
y

population_mean=10

diff_erence2 = y -population_mean
diff_erence2

#the difference between sample population and the population mean is decreasing along with the population enlarges, as the distribution is less discreted with more random are drawn 

```
